fn contains(string, subchar){
    for char in string{
        if char == subchar{
            return true
        }
    }
    return false
}

ALPHLOW = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
ALPHUP = ["A","B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]

ALPHSTRLOW = "abcdefghijklmnopqrstuvwxyz"
ALPHSTRUP = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

ALPHSTR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"

fn lower(string){
    lowstring = ""
    for char in string{
        if contains(ALPHSTR, char) == false{
            lowstring = lowstring + char
        else
            for i = 0 to len(ALPHUP){
                if char == ALPHUP[i]{
                    lowstring = lowstring + ALPHLOW[i]  
                    break 
                elif char == ALPHLOW[i]
                    lowstring = lowstring + char 
                    break
                }
            }
        }
    }
    return lowstring
}

fn upper(string){
    upstring = ""
    for char in string{
        if contains(ALPHSTR, char) == false{
            upstring = upstring + char
        else
            for i = 0 to len(ALPHLOW){
                if char == ALPHLOW[i]{
                    upstring = upstring + ALPHUP[i]  
                    break 
                elif char == ALPHUP[i]
                    upstring = upstring + char 
                    break
                }
            }
        }
    }
    return upstring
}

fn reversecase(string){
    reversestr = ""
    for char in string{
        if contains(ALPHSTR, char) == false{
            reversestr = reversestr + char
        else
            for i = 0 to len(ALPHLOW){
                if char == ALPHLOW[i]{
                    reversestr = reversestr + ALPHUP[i]  
                    break 
                elif char == ALPHUP[i]
                    reversestr = reversestr + ALPHLOW[i]  
                    break
                }
            }
        }
    }
    return reversestr
}

fn chararray(string){
    array = []
    for char in string{
        append(array, char)
    }

    return array
}

fn strlen(string){
    accum = 0
    for char in string{
        accum = accum+ 1
    }
    return accum
}



fn startswith(string, value){
    valuearr = chararray(value)
    stringarr = chararray(string)
    if len(valuearr) > len(stringarr){
        return false
    }

    for i = 0 to len(valuearr){
        if stringarr[i] != valuearr[i]{
            return false
        }
    }
    
    return true
}

fn find(string, seekchar){
    locs = []
    string = chararray(string)
    for i = 0 to len(string){
        if string[i] == seekchar{
            append(locs, i)
        }
    }
    return locs
}

fn countof(string, seekchar){
    accum = 0
    
    string = chararray(string)
    for i = 0 to len(string){
        if string[i] == seekchar{
            accum = accum +1
        }
    }
    return accum
}

fn join(list, interval=""){
    string = ""
    for i = 0 to len(list){
        string = string + interval + list[i]
    }
    return string
}
